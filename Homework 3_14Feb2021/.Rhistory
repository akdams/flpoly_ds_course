valuea <- 27 (38-17)
round(3.1315)
factorial(12)
mean(1:17)
sample(x=die,size =1 )
# Create a vector with numbers from 1 to 6
die <- 1:6
sample(x=die,size =1 )
sample(die, size=1)
sample(die, size=1)
sample(die, size=1)
sample(die, size=1)
sample(die, size=1)
sample(die, size=1)
sample(x=die,size = 1)
sample(x=die,size = 1)
sample(x=die,size = 1)
sample(x=die,size = 1)
sample(x=die,size = 1)
sample(x=die,size = 1)
$27 (38 -17)$
27 (38 -17)
(27 (38 -17))
(27*(38 -17))
ln(14^7)
x <-  14^7
print(ln(x))
x <-  14^7
ln(x)
14^7
log(14^7)
sqrt(436/12)
a <- 5:160:5
a <- c(5,160,5)
a <- c(5,160,5)
a <- c(5:160:5)
a <- seq(5,160,5)
a <- seq(5,160,5)
print(a)
b <- 87:56
b <- 87:56
print(b)
d <- a*b
d <- a*b
print(d)
d[19]
d[20]
d[21]
less_than <- d[d<2000]
less_than <- d[d<2000]
print(less_than)
greater_than <- d[d < 6000]
print(greater_than)
greater_than <- d[d > 6000]
print(greater_than)
length(nouns)
sample(die, size=1)
sample(die, size=1)
sample(die, size=1)
sample(die, size=1)
sample(die, size=1)
sample(die, size=1)
sample(die, size=1)
sample(die, size=1)
sample(die, size=1)
sample(die, size=1)
sample(die, size=1)
sample(x=die,size = 1)
sample(x=die,size = 1)
sample(x=die,size = 1)
sample(x=die,size = 1)
sample(x=die,size = 1)
sample(x=die,size = 1)
sample(x=die,size = 1)
sample(x=die,size = 1)
nchar(nouns)
nouns <- c("apple", "flower", "insect", "lettuce", "knife", "dog", "cloud", "person", "cabinet", "flower" )
nchar(nouns)
length(nouns)
nouns4 <- nouns[1:4]
print(nouns4)
nouns8 <- nouns[-8]
nouns8 <- nouns[-8]
print(nouns8)
nouns8 <- nouns[2:10]
print(nouns8)
nouns <-  nouns(-nouns)
nouns <-  nouns(-10)
nounback <-  nouns(-10)
nounback <-  rev(nouns)
print(nounback)
nounjumble <- noun[1, 3:6, 10]
nounjumble <- nouns[1, 3:6, 10]
nounjumble <- nouns[1,3,4,5,6,10]
nounjumble <- nouns[1,3]
nounjumble <- nouns[1]
print(nounjumble)
nounjumble <- nouns[1,3]
indices <- c(1,3,4,5,6,10)
jumbled <- nouns[indices]
print(jumbled)
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE, finite = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01(c(0, 5, 10))
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE, finite = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01(c(0, 5, 10))
rescale01(c(100, 500, 10000))
rescale01(c(0,5,10))
rescale01(c(1,5,10))
rescale01(c(-1,5,10))
rescale01(c(0,5,10))
nouns[(length(nouns)-7):length(nouns)]
d[19]
d[20]
d[21]
imperial_to_metric <- function(var1,var2)
{
metric <- (var1+(var2/12))/0.3048 # takes total feet length and divides it by the conversion
print(metric)
}
imperial_to_metric <- function(var1,var2)
{
metric <- (var1+(var2/12))/0.3048 # takes total feet length and divides it by the conversion
print(metric)
}
imperial_to_metric(6,1)
imperial_to_metric <- function(var1,var2)
{
metric <- (var1+(var2/12))/0.3048 # takes total feet length and divides it by the conversion
print(metric)
}
imperial_to_metric(6,0)
imperial_to_metric <- function(var1,var2)
{
metric <- (var1+(var2/12))*0.3048 # takes total feet length and divides it by the conversion
print(metric)
}
imperial_to_metric(6,0)
imperial_to_metric <- function(var1,var2)
{
metric <- (var1+(var2/12))*0.3048 # takes total feet length and divides it by the conversion
print(metric)
}
paste("If you are 6 foot, you are this height in meters:", imperial_to_metric(6,0))
height_in_meters <- imperial_to_metric(1.8828,0)/.3048
paste("If you are 1.8228 meters tall, you are this height in feet", height_in_meters)
height_in_meters <- (imperial_to_metric(1.8828,0))/.3048
paste("If you are 1.8228 meters tall, you are this height in feet", height_in_meters)
height_in_meters <- (imperial_to_metric(1,0))/.3048
paste("If you are 1.8228 meters tall, you are this height in feet", height_in_meters)
height_in_meters <- (imperial_to_metric(1.8288,0))/.3048
paste("If you are 1.8228 meters tall, you are this height in feet", height_in_meters)
height_in_meters <- imperial_to_metric(6,0)
paste("If you are 1.8228 meters tall, you are this height in feet", height_in_meters)
imperial_to_metric <- function(var1,var2) #feet and inches
{
metric <- (var1+(var2/12))*0.3048 # takes total feet length and divides it by the conversion
return(metric)
}
paste("If you are 6 foot, you are this height in meters:", imperial_to_metric(6,0))
height_in_meters <- imperial_to_metric(6,0)
height_in_meters <- imperial_to_metric(6,0)
print(height_in_meters)
height_in_meters <- imperial_to_metric(6,6)
print(height_in_meters)
imperial_to_metric <- function(var1,var2) #feet and inches
{
metric <- (var1+(var2/12))*0.3048 # takes total feet length and divides it by the conversion
return(metric)
}
paste("If you are 6 foot, you are this height in meters:", imperial_to_metric(6,6))
imperial_to_metric <- function(var1,var2) #feet and inches
{
metric <- (var1+(var2/12))*0.3048 # takes total feet length and divides it by the conversion
return(metric)
}
height_in_meters <- imperial_to_metric(6,6)
print(height_in_meters)
d[19:21]
d[20]
d[21]
d[19:21]
reversenouns <- rev(nouns)
reversenouns <- rev(nouns)
reversenouns
nouns[(length(nouns)-7):length(nouns)]
indices <- c(1,3:6,10)
jumbled <- nouns[indices]
print(jumbled)
reversenouns <- rev(nouns)
reversenouns
rescale01(c(1,5,10))
rescale01(c(0,5,10))
rescale01(c(0,5,10))
rescale01(c(100,50,1000))
rescale01(c(0,5,10))
rescale01(c(0,6,10))
rescale01(c(0,7,10))
rescale01(c(100,50,1000))
rescale01(c(0,5,10))
rescale01(c(0,6,10))
rescale01(c(0,7,13))
rescale01(c(0,5,10))
rescale01(c(0,6,10))
rescale01(c(0,7,13))
rescale01(c(-5,0,5))
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE, finite = TRUE)
print(rng)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01(c(0,5,10)) #10
rescale01(c(0,6,10))
rescale01(c(0,7,13))
rescale01(c(-5,0,5))
rescale01(c(0,5,10)) #10
rescale01(c(0,6,10))
rescale01(c(0,5,10)) #-10/
#rescale01(c(0,6,10))
rescale01 <- function(x) {
print(x)
rng <- range(x, na.rm = TRUE, finite = TRUE)
print(rng)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01(c(0,5,10)) #-10/
#rescale01(c(0,6,10))
rescale01(c(0,10,5)) #-10/
#rescale01(c(0,6,10))
rescale01(c(0,10,51)) #-10/
#rescale01(c(0,6,10))
rescale01(c(0,52,51)) #-10/
#rescale01(c(0,6,10))
rescale01 <- function(x) {
print(x)
rng <- range(x, na.rm = TRUE, finite = TRUE)
print(rng)
(x[1] - rng[1]) / (rng[2] - rng[1])
}
rescale01(c(0,52,51)) #0-0, 52-0, 51-0 / 52-0
rescale01 <- function(x) {
print(x)
rng <- range(x, na.rm = TRUE, finite = TRUE)
print(rng)
(x[2] - rng[1]) / (rng[2] - rng[1])
}
rescale01(c(0,52,51)) #0-0, 52-0, 51-0 / 52-0
rescale01 <- function(x) {
print(x)
rng <- range(x, na.rm = TRUE, finite = TRUE)
print(rng)
(x[3] - rng[1]) / (rng[2] - rng[1])
}
rescale01(c(0,52,51)) #0-0, 52-0, 51-0 / 52-0
rescale01 <- function(x) {
print(x)
rng <- range(x, na.rm = TRUE, finite = TRUE)
print(rng)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01(c(0,52,51)) #0-0, 52-0, 51-0 / 52-0
rescale01(c(,0,52))
rescale01(c(z,0,52))
rescale01(c(0,52))
rescale01(c(52))
rescale01(c(NA))
rescale01(c(NA, 5, 23))
rescale01(c(NA, 5, 10))
rescale01(c(NA, 5, 5))
rescale01(c(NA, 5, 10))
rescale01(c(0,5,10))
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE, finite = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01(c(0,5,10))
log(14^7)
print(round(3.1315))
print(factorial(12))
print(mean(1:17))
