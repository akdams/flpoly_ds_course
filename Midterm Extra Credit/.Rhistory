filter(Sepal.Length >= myid)filter(my_iris, Sepal.Length >= myid))
new_set <-  my_iris %>%
filter(Sepal.Length >= myid)filter(my_iris, Sepal.Length >= myid)
new_set <-  my_iris %>%
filter(Sepal.Length >= myid)
library(tidyverse)
head(iris) #quick look at the best ranked ones
glimpse(iris)
myid <- (pi*0230)/1000 #multiplied by pi and then divide that function by 1000
myid #calling that variable
# use ggplot to create the histogram
ggplot(y = iris$Petal.Length) + #creates plot
geom_bar(mapping = aes(x = iris$Petal.Length, fill = iris$Petal.Length)) #wanting it to have petal length of the iris as x axis and count it based how many times it occurs.
# use ggplot to create the boxplots
ggplot(data=iris, aes(y=Petal.Length, x = Species, fill = Species))+geom_boxplot() #this is taking the data set iris and looking at the Petal Lengths for each different species. I have it colored differently depending on the species and made it into boxplots.
iris %>% #data set
group_by(Species) %>% #wanting it "per species"
summarise(Avg_Petal_length = mean(Petal.Length), Avg_Petal_width= mean(Petal.Width)) #averaging out the petal length and width for each.
my_iris <- iris #assigning the old data set to the one I'm creating
my_iris[1:4] <- my_iris[1:4]*10 #wanting it to select the first four columns. What this does is it includes all the number values that need to be multiplied and ignores the species name as that is the 5th. State that the new 4 are equal to the old values X 10 to obtain the conversion
my_iris #print out that data set
new_set <-  my_iris %>%
filter(Sepal.Length >= myid)
new_set
music_path <- "https://raw.githubusercontent.com/reisanar/datasets/master/bbTop100.csv"
music_top100 <- read.csv(music_path)
glimpse(music_top100) #wanting to take a look at the names of the columns
# use filter()
music_top100 %>% #data set
filter(year == "2013") #filters it by year
# hint: use the mutate() function
music_top100 %>% #data set
mutate(duration_min = (duration_ms / 60000)) #takes the conversion rate of 60,000 ms to one second
# hint: use geom_histogram
# use the filter() function
music_top100 %>% #data set
filter(duration_min>10) %>% #wanting to filter it by the songs that are greater than 10 minutes
select(year) #selecting the column with the inputs that are satisfied after the filter
my_iris %>%
filter(Sepal.Length>= myid)
my_iris %>% #data set we just made
filter(Sepal.Length>= myid) #filtering it to be Sepal.Length to be greater or equal to my id (which shocker, it's a lot)
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) + #creates plot with duration min
geom_bar(mapping = aes(x = music_top100$duration_min, fill = music_top100$duration_min)) + geom_histogram(bandwith = 0.5)
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) +
geom_bar(mapping = aes(x = music_top100$duration_min, fill = music_top100$duration_min)) +
geom_histogram(binwidth = 0.5)
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) +
geom_bar(mapping = aes(x = music_top100$duration_min, fill = music_top100$duration_min), binwidth = 0.5)
library(tidyverse)
head(iris) #quick look at the best ranked ones
glimpse(iris)
myid <- (pi*0230)/1000 #multiplied by pi and then divide that function by 1000
myid #calling that variable
# use ggplot to create the histogram
ggplot(y = iris$Petal.Length) + #creates plot
geom_bar(mapping = aes(x = iris$Petal.Length, fill = iris$Petal.Length)) #wanting it to have petal length of the iris as x axis and count it based how many times it occurs.
# use ggplot to create the boxplots
ggplot(data=iris, aes(y=Petal.Length, x = Species, fill = Species))+geom_boxplot() #this is taking the data set iris and looking at the Petal Lengths for each different species. I have it colored differently depending on the species and made it into boxplots.
iris %>% #data set
group_by(Species) %>% #wanting it "per species"
summarise(Avg_Petal_length = mean(Petal.Length), Avg_Petal_width= mean(Petal.Width)) #averaging out the petal length and width for each.
my_iris <- iris #assigning the old data set to the one I'm creating
my_iris[1:4] <- my_iris[1:4]*10 #wanting it to select the first four columns. What this does is it includes all the number values that need to be multiplied and ignores the species name as that is the 5th. State that the new 4 are equal to the old values X 10 to obtain the conversion
my_iris #print out that data set
my_iris %>% #data set we just made
filter(Sepal.Length>= myid) #filtering it to be Sepal.Length to be greater or equal to my id (which shocker, it's a lot)
music_path <- "https://raw.githubusercontent.com/reisanar/datasets/master/bbTop100.csv"
music_top100 <- read.csv(music_path)
glimpse(music_top100) #wanting to take a look at the names of the columns
# use filter()
music_top100 %>% #data set
filter(year == "2013") #filters it by year
# hint: use the mutate() function
music_top100 %>% #data set
mutate(duration_min = (duration_ms / 60000)) #takes the conversion rate of 60,000 ms to one second
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) +
geom_bar(mapping = aes(x = music_top100$duration_min, fill = music_top100$duration_min), binwidth = 0.5)
# use the filter() function
music_top100 %>% #data set
filter(duration_min>10) %>% #wanting to filter it by the songs that are greater than 10 minutes
select(year) #selecting the column with the inputs that are satisfied after the filter
# hint: use geom_histogram
ggplot(data = music_top100$duration_min) + #creates a plot with the
geom_bar(mapping = aes(x = music_top100$duration_min, fill = music_top100$duration_min), binwidth = 0.5)
# use ggplot to create the histogram
ggplot(data = iris$Petal.Length) + #creates plot
geom_bar(mapping = aes(x = iris$Petal.Length, fill = iris$Petal.Length)) #wanting it to have petal length of the iris as x axis and count it based how many times it occurs.
# use ggplot to create the histogram
ggplot(y = iris$Petal.Length) + #creates plot
geom_bar(mapping = aes(x = iris$Petal.Length, fill = iris$Petal.Length)) #wanting it to have petal length of the iris as x axis and count it based how many times it occurs.
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) + #creates a plot with the
geom_bar(mapping = aes(x = music_top100$duration_min, fill = music_top100$duration_min), binwidth = 0.5)
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) + #creates a plot with the
geom_bar(mapping = aes(x = music_top100$duration_min, fill = music_top100$duration_min))
#simliar layout to the histogram created in Problem 1. Small sliver would indicate there is a very small distribution of songs
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) + #creates a plot
geom_bar(mapping = aes(x = music_top100$duration_min, fill = music_top100$duration_min), binwidth = 0.5)
#similar layout to the histogram created in Problem 1. Small sliver would indicate there is a very small distribution of songs
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) + #creates a plot
geom_bar(mapping = aes(x = music_top100$duration_min, fill = music_top100$duration_min)) + geom_histogram(binwidth = 0.5)
#similar layout to the histogram created in Problem 1. Small sliver would indicate there is a very small distribution of songs
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) + #creates a plot
geom_bar(mapping = aes(x = music_top100$duration_min) + geom_histogram(binwidth = 0.5)
#similar layout to the histogram created in Problem 1. Small sliver would indicate there is a very small distribution of songs
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) + #creates a plot
geom_bar(mapping = aes(x = music_top100$duration_min, fill = music_top100$duration_min)) + geom_histogram(binwidth = 0.5)
#similar layout to the histogram created in Problem 1. Small sliver would indicate there is a very small distribution of songs
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) + #creates a plot
geom_bar(mapping = aes(x = music_top100$duration_min, fill = music_top100$duration_min)) + geom_histogram(binwidth = 0.5)
#similar layout to the histogram created in Problem 1 but added in the bindwidth
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) + #creates a plot
geom_bar(mapping = aes(x = music_top100$duration_min, fill = music_top100$duration_min)) + geom_histogram(binwidth = 0.5)
#similar layout to the histogram created in Problem 1 but added in the bin-width
# use the filter() function
music_top100 %>% #data set
filter(duration_min>10) %>% #wanting to filter it by the songs that are greater than 10 minutes
select(year) #selecting the column with the inputs that are satisfied after the filter
glimpse(music_top100)
# hint: use the mutate() function
music_top100 %>% #data set
mutate(duration_min = (duration_ms / 60000)) #takes the conversion rate of 60,000 ms to one second
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) + #creates a plot
geom_bar(mapping = aes(x = music_top100$duration_min, fill = music_top100$duration_min)) + geom_histogram(binwidth = 0.5)
#similar layout to the histogram created in Problem 1 but added in the bin-width
# use the filter() function
music_top100 %>% #data set
filter(duration_min>10) %>% #wanting to filter it by the songs that are greater than 10 minutes
select(year) #selecting the column with the inputs that are satisfied after the filter
# number of explicit songs per year
music_top100 %>% #data set
filter(explicit == "TRUE") %>% #selecting only those that are explicit
summarise(n()) #counting them
# hint: use the mutate() function
music_top100 <- music_top100 %>% #data set
mutate(duration_min = (duration_ms / 60000)) #takes the conversion rate of 60,000 ms to one second
# hint: use the mutate() function
music_top100 <- music_top100 %>% #data set
mutate(duration_min = (duration_ms / 60000)) #takes the conversion rate of 60,000 ms to one second
music_top100
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) + #creates a plot
geom_bar(mapping = aes(x = music_top100$duration_min, fill = music_top100$duration_min)) + geom_histogram(binwidth = 0.5)
#similar layout to the histogram created in Problem 1 but added in the bin-width
# use the filter() function
music_top100 %>% #data set
filter(duration_min>10) %>% #wanting to filter it by the songs that are greater than 10 minutes
select(year) #selecting the column with the inputs that are satisfied after the filter
# number of explicit songs per year
music_top100 %>% #data set
filter(explicit == "TRUE") %>% #selecting only those that are explicit
summarise(n()) #counting them
iris %>% #data set
group_by(Species) %>% #wanting it "per species"
summarise(Avg_Petal_length = mean(Petal.Length), Avg_Petal_width= mean(Petal.Width)) #averaging out the petal length and width for each.
mean_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loud = mean(loudness))
ggplot(mean_dance, aes(x = mean_loudness$year, y = mean_loudness$loudnessy)) +
geom_point(size = 2)
mean_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loud = mean(loudness))
ggplot(mean_dance, aes(x = mean_loudness$year, y = mean_loudness$loudnessy)) +
geom_point(size = 2)
mean_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loudness = mean(loudness))
ggplot(mean_dance, aes(x = mean_loudness$year, y = mean_loudness$loudnessy)) +
geom_point(size = 2)
mean_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loudness = mean(loudness))
ggplot(mean_loudness, aes(x = mean_loudness$year, y = mean_loudness$loudnessy)) +
geom_point(size = 2)
mean_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loudness = mean(loudness))
ggplot(mean_loudness, aes(x = mean_loudness$year, y = mean_loudness$loudness)) +
geom_point(size = 2)
new_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loudness = mean(loudness))
ggplot(mean_loudness, aes(x = new_loudness$year, y = new_loudness$loudness))
new_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loudness = mean(loudness))
ggplot(mean_loudness, aes(x = new_loudness$year, y = new_loudness$loudness)) geom_point(size = 2)
new_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loudness = mean(loudness))
ggplot(mean_loudness, aes(x = new_loudness$year, y = new_loudness$loudness))+ geom_point(size = 2)
new_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loudness = mean(loudness))
ggplot(mean_loudness, aes(x = new_loudness$year, y = new_loudness$loudness))+ geom_point(size = 4)
new_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loudness = mean(loudness))
ggplot(mean_loudness, aes(x = new_loudness$year, y = new_loudness$loudness))+ geom_point(size = 3)
new_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loudness = mean(loudness))
ggplot(new_loudness, aes(x = new_loudness$year, y = new_loudness$loudness))+ geom_point(size = 3)
new_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loudness = mean(loudness))
ggplot(new_loudness, aes(x = year, y = loudness))+ geom_point(size = 3)
new_tempo <- music_top100 %>%
group_by(year) %>%
summarise(tempo = mean(tempo))
ggplot(new_tempo, aes(x = yeaar, y = tempo))+ geom_point(size = 3)
new_tempo <- music_top100 %>%
group_by(year) %>%
summarise(tempo = mean(tempo))
ggplot(new_tempo, aes(x = year, y = tempo))+ geom_point(size = 3)
new_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loudness = mean(loudness))
ggplot(new_loudness, aes(x = year, y = loudness))+ geom_point(size = 3)+geom_smooth(methods = lm, formula = y~x)
new_tempo <- music_top100 %>%
group_by(year) %>%
summarise(tempo = mean(tempo))
ggplot(new_tempo, aes(x = year, y = tempo))+ geom_point(size = 3)+geom_smooth(methods = lm, formula = y~x)
new_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loudness = mean(loudness))
ggplot(new_loudness, aes(x = year, y = loudness))+ geom_point(size = 3)+geom_smooth(methods = 'lm', formula = y~x)
new_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loudness = mean(loudness))
ggplot(new_loudness, aes(x = year, y = loudness))+ geom_point(size = 3)+geom_smooth(methods = "lm", formula = y~x)
new_tempo <- music_top100 %>%
group_by(year) %>%
summarise(tempo = mean(tempo))
ggplot(new_tempo, aes(x = year, y = tempo))+ geom_point(size = 3)+geom_smooth(methods = "lm", formula = y~x)
new_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loudness = mean(loudness))
ggplot(new_loudness, aes(x = year, y = loudness))+ geom_point(size = 3)+geom_smooth(methods = "lm")
new_tempo <- music_top100 %>%
group_by(year) %>%
summarise(tempo = mean(tempo))
ggplot(new_tempo, aes(x = year, y = tempo))+ geom_point(size = 3)+geom_smooth(methods = "lm")
new_tempo <- music_top100 %>%
group_by(year) %>%
summarise(tempo = mean(tempo))
ggplot(new_tempo, aes(x = year, y = tempo))+ geom_point(size = 3)+geom_smooth(method = "lm")
new_loudness <- music_top100 %>%
group_by(year) %>%
summarise(loudness = mean(loudness))
ggplot(new_loudness, aes(x = year, y = loudness))+ geom_point(size = 3)+geom_smooth(method = "lm")
new_energy <- music_top100 %>%
group_by(year) %>%
summarise(energy = mean(energy))
ggplot(new_energy, aes(x = year, y = energy))+ geom_point(size = 3)+geom_smooth(method = "lm")
new_live <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>% #filtered by year
summarise(liveness = mean(liveness))#grabbing the average values year over year
ggplot(new_live, aes(x = year, y = liveness))+ geom_point(size = 3)+geom_smooth(method = "lm")#data set looking at energy in comparison to the year. Adding sizable data points to make it easier to see. Added a linear regression line to the data to make it easy to extrapolate the trend.
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) + #creates a plot
geom_bar(mapping = aes(x = duration_min, fill = music_top100$duration_min)) + geom_histogram(binwidth = 0.5)
# use ggplot to create the histogram
ggplot(y = iris$Petal.Length) + #creates plot
geom_bar(mapping = aes(x = Petal.Length, fill = iris$Petal.Length)) #wanting it to have petal length of the iris as x axis and count it based how many times it occurs.
library(tidyverse)
head(iris) #quick look at the best ranked ones
glimpse(iris)
myid <- (pi*0230)/1000 #multiplied by pi and then divide that function by 1000
myid #calling that variable
# use ggplot to create the histogram
ggplot(y = iris$Petal.Length) + #creates plot
geom_bar(mapping = aes(x = iris$Petal.Length, fill = iris$Petal.Length)) #wanting it to have petal length of the iris as x axis and count it based how many times it occurs.
# use ggplot to create the boxplots
ggplot(data=iris, aes(y=Petal.Length, x = Species, fill = Species))+geom_boxplot() #this is taking the data set iris and looking at the Petal Lengths for each different species. I have it colored differently depending on the species and made it into boxplots.
iris %>% #data set
group_by(Species) %>% #wanting it "per species"
summarise(Avg_Petal_length = mean(Petal.Length), Avg_Petal_width= mean(Petal.Width)) #averaging out the petal length and width for each.
my_iris <- iris #assigning the old data set to the one I'm creating
my_iris[1:4] <- my_iris[1:4]*10 #wanting it to select the first four columns. What this does is it includes all the number values that need to be multiplied and ignores the species name as that is the 5th. State that the new 4 are equal to the old values X 10 to obtain the conversion
my_iris #print out that data set
my_iris %>% #data set we just made
filter(Sepal.Length>= myid) #filtering it to be Sepal.Length to be greater or equal to my id (which shocker, it's a lot)
music_path <- "https://raw.githubusercontent.com/reisanar/datasets/master/bbTop100.csv"
music_top100 <- read.csv(music_path)
glimpse(music_top100) #wanting to take a look at the names of the columns
# use filter()
music_top100 %>% #data set
filter(year == "2013") #filters it by year
# hint: use the mutate() function
music_top100 <- music_top100 %>% #data set
mutate(duration_min = (duration_ms / 60000)) #takes the conversion rate of 60,000 ms to one second
music_top100
# hint: use geom_histogram
ggplot(y = music_top100$duration_min) + #creates a plot
geom_bar(mapping = aes(x = music_top100$duration_min, fill = music_top100$duration_min)) + geom_histogram(binwidth = 0.5)
#similar layout to the histogram created in Problem 1 but added in the bin-width
# use the filter() function
music_top100 %>% #data set
filter(duration_min > 10) %>% #wanting to filter it by the songs that are greater than 10 minutes
select(year) #selecting the column with the inputs that are satisfied after the filter
# number of explicit songs per year
music_top100 %>% #data set
filter(explicit == "TRUE") %>% #selecting only those that are explicit
summarise(n()) #counting them
new_loudness <- music_top100 %>% #assigned a variable to the old data set
group_by(year) %>% #filtered by year
summarise(loudness = mean(loudness))#grabbing the average values year over year
ggplot(new_loudness, aes(x = year, y = loudness))+ geom_point(size = 3)+geom_smooth(method = "lm")#data set looking at loudness in comparison to the year. Adding sizable data points to make it easier to see. Added a linear regression line to the data to make it easy to extrapolate the trend.
new_tempo <- music_top100 %>% #assigning this to a new data set
group_by(year) %>% #looking at it by year
summarise(tempo = mean(tempo)) #grabbing the average values year over year
ggplot(new_tempo, aes(x = year, y = tempo))+ geom_point(size = 3)+geom_smooth(method = "lm") #data set looking at tempo in comparison to the year. Adding sizable data points to make it easier to see. Added a linear regression line to the data to make it easy to extrapolate the trend.
new_energy <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>% #filtered by year
summarise(energy = mean(energy))#grabbing the average values year over year
ggplot(new_energy, aes(x = year, y = energy))+ geom_point(size = 3)+geom_smooth(method = "lm")#data set looking at energy in comparison to the year. Adding sizable data points to make it easier to see. Added a linear regression line to the data to make it easy to extrapolate the trend.
my_iris <- iris #assigning the old data set to the one I'm creating
my_iris[1:4] <- my_iris[1:4]*1000 #wanting it to select the first four columns. What this does is it includes all the number values that need to be multiplied and ignores the species name as that is the 5th. State that the new 4 are equal to the old values X 10 to obtain the conversion
my_iris #print out that data set
my_iris %>% #data set we just made
filter(Sepal.Length>= myid) #filtering it to be Sepal.Length to be greater or equal to my id (which shocker, it's a lot)
my_iris %>% #data set we just made
filter(Sepal.Length >= myid) #filtering it to be Sepal.Length to be greater or equal to my id (which shocker, it's a lot)
my_iris <- iris #assigning the old data set to the one I'm creating
my_iris[1:4] <- my_iris[1:4]*10 #wanting it to select the first four columns. What this does is it includes all the number values that need to be multiplied and ignores the species name as that is the 5th. State that the new 4 are equal to the old values X 10 to obtain the conversion
my_iris #print out that data set
my_iris %>% #data set we just made
filter(Sepal.Length >= myid) #filtering it to be Sepal.Length to be greater or equal to my id (which shocker, it's a lot)
added <- music_top100 %>% #assigned new variable to old data set
summarise(loudness = mean(loudness), tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = loudness, y = energy))+ geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
summarise(loudness = mean(loudness), tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = loudness, y = tempo))+ geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo))+ geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), color = "year")+ geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), color == "year")+ geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), color == "year")+ geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), color == "Year")+ geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), fill == "Year")+ geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), fill == "year")+ geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), fill == "year")+ geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), fill == "year")+ geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), scale_fill_continuous(year)) + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), fill =="year") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_temoo), fill =="year") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), fill =="year") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
#group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), fill =="year") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), fill =="year") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), fill ="year") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), scale_fill_continuous(type = year)) + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), scale_fill_continuous(type == year)) + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), scale_fill_continuous(type == "year")) + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), scale_fill_continuous(type = "year")) + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), scale_fill_continuous()) + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), scale_fill_continuous(palette = "Spectral")) + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo)) + scale_fill_continuous(palette = "Spectral")) + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo)) + scale_fill_continuous(palette = "Spectral") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo)) + scale_fill_gradient(low = "blue", high = "red", midpoint =.2) + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo)) + scale_fill_gradient(low = "blue", mid = "white", high = "red", midpoint =.2) + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo)) + scale_fill_gradient(low = "cyan", mid = "deepskyblue4", high = "navy", midpoint =.2) + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo)) + scale_fill_gradient(low = "cyan", mid = "deepskyblue4", high = "navy") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo)) + scale_fill_gradient(low = "cyan", high = "navy") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo, fil = "year")) + scale_fill_gradient(low = "cyan", high = "navy") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo, fil = "year")) + scale_fill_gradient(low = "blue", high = "red") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo, fill = "year")) + scale_fill_gradient(low = "blue", high = "red") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo)) + scale_fill_gradient(low = "blue", high = "red") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), fill = "year") + scale_fill_gradient(low = "blue", high = "red") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), fill = year) + scale_fill_gradient(low = "blue", high = "red") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), fill == year) + scale_fill_gradient(low = "blue", high = "red") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), fill == year) + scale_fill_gradient(low = "blue", high = "red") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), fill == year) + scale_fill_gradient2() + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), fill = year) + scale_fill_gradient2() + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo), color == year) + scale_fill_gradient(low = "blue", high = "red") + geom_point(size = 3)+geom_smooth(method = "lm")
added <- music_top100 %>% #assigned new variable to old data set
group_by(year) %>%
summarise(avg_loudness = mean(loudness), avg_tempo = mean(tempo))#grabbing the average values year over year
ggplot(added, aes(x = avg_loudness, y = avg_tempo)) + geom_point(size = 3)+geom_smooth(method = "lm")
load("C:/Users/austi/OneDrive/Desktop/Florida Poly - Spring 2021/Intro_to_Data_Science/Homeworks/RepoPractice_weekone/flpoly_ds_course/Midterm Extra Credit/.RData")
load("C:/Users/austi/OneDrive/Desktop/Florida Poly - Spring 2021/Intro_to_Data_Science/Homeworks/RepoPractice_weekone/flpoly_ds_course/Midterm Extra Credit/.RData")
View(my_iris)
